{"version":3,"file":"static/js/392.8c8c2c03.chunk.js","mappings":"+SACMA,EAAU,mCACVC,EAAU,gCAGHC,EAAiB,mCAAG,sGACNC,EAAAA,EAAAA,IAAA,UAAaF,EAAb,sBAA0C,CAC7DG,OAAQ,CACJC,QAASL,KAHY,cACvBM,EADuB,gBAMRA,EAASC,KAAKC,QANN,cAMvBC,EANuB,yBAOtBA,GAPsB,2CAAH,qDAYjBC,EAAgB,mCAAG,WAAMC,GAAN,yFACPR,EAAAA,EAAAA,IAAA,UAAaF,EAAb,+BAA2CU,GAAe,CAC/EP,OAAQ,CACNC,QAASL,EACTY,SAAU,QACVC,MAAOF,EACPG,KAAM,KANoB,cACxBR,EADwB,gBASTA,EAASC,KAAKC,QATL,cASxBC,EATwB,yBAUvBA,GAVuB,2CAAH,sDAyBhBM,EAAa,mCAAG,WAAMC,GAAN,iFACdb,EAAAA,EAAAA,IAAA,UAAaF,EAAb,kBAA8Be,EAA9B,oBAA4ChB,IAD9B,mFAAH,sDAIbiB,EAAW,mCAAG,WAAMD,GAAN,iFACZb,EAAAA,EAAAA,IAAA,UACRF,EADQ,kBACSe,EADT,4BAC+BhB,IAFnB,mFAAH,sDAMXkB,EAAU,mCAAG,WAAMF,GAAN,iFACXb,EAAAA,EAAAA,IAAA,UAAaF,EAAb,kBAA8Be,EAA9B,4BAAoDhB,IADzC,mFAAH,qD,+ICnDvB,EAA4B,wBAA5B,EAAgE,wBAAhE,EAAyG,6BAAzG,EAAkJ,wB,SCyDlJ,EArDa,WACX,OAAwBmB,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAAgCF,EAAAA,EAAAA,WAAS,GAAzC,eAAOG,EAAP,KAAgBC,EAAhB,KACA,GAA0BJ,EAAAA,EAAAA,UAAS,MAAnC,eAAOK,EAAP,KAAcC,EAAd,KAEQC,GAAYC,EAAAA,EAAAA,MAAZD,QAkBR,OAhBAE,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAY,mCAAG,6FACnBN,GAAa,GADM,mBAGMN,EAAAA,EAAAA,IAAYS,GAHlB,gBAGTnB,EAHS,EAGTA,KACRc,EAAQd,EAAKa,MAJI,gDAMjBK,EAAS,KAAMK,SANE,yBAQjBP,GAAa,GARI,4EAAH,qDAWlBM,EAAaH,EACd,GAAE,CAACA,KAIA,gBAAIK,UAAWC,EAAf,UACCV,IAAW,SAACW,EAAA,EAAD,IACXT,IAAS,uBAAIA,EAAMM,UACnBV,EAAKc,OAAS,EACbd,EAAKe,KAAI,gBAAGnB,EAAH,EAAGA,GAAIoB,EAAP,EAAOA,aAAcC,EAArB,EAAqBA,KAAMC,EAA3B,EAA2BA,UAA3B,OACT,gBAAaP,UAAWC,EAAxB,WACA,0BACI,gBACIO,IACiB,OAAjBH,EACI,6DADJ,yCAEsCA,GAEtCI,IAAKH,EACLI,MAAM,MACNC,OAAO,WAGf,cAAGX,UAAWC,EAAd,SAAiCK,KACjC,eAAGN,UAAWC,EAAd,wBAAiDM,OAdxCtB,EADA,KAmBT,qCAIP,C","sources":["components/Api/Api.jsx","webpack://react-homework-template/./src/components/Cast/cast.module.css?8374","components/Cast/Cast.jsx"],"sourcesContent":["import axios from 'axios';\nconst API_KEY = 'f632edb05cc91b97d9ccb27096819906';\nconst baseURL = 'https://api.themoviedb.org/3/';\n\n\nexport const getTrendingMovies = async () => {\n    const responce = await axios.get(`${baseURL}trending/movie/day`, {\n        params: {\n            api_key: API_KEY,\n        },\n    });\n    const movies = await responce.data.results;\n    return movies;\n};\n\n\n\nexport const getSearchResults = async(searchFilms) => {\n  const responce = await axios.get(`${baseURL}search/movie?&query=${searchFilms}`, {\n    params: {\n      api_key: API_KEY,\n      language: 'en-US',\n      query: searchFilms,\n      page: 1,\n    },\n  });\n  const movies = await responce.data.results;\n  return movies;\n}\n\n// export const getReviews = async(movieId) => {\n//   const responce = await axios.get(`${baseURL}/movie/${id}/reviews?api_key=${API_KEY}`, {\n//     params: {\n//       api_key: API_KEY,\n//     },\n//   });\n//   const movies = await responce.data.results;\n//   return movies;\n// }\n\n\n\nexport const fetchFilmToId = async id => {\n  return await axios.get(`${baseURL}/movie/${id}?api_key=${API_KEY}`);\n};\n\nexport const getCastToId = async id => {\n  return await axios.get(\n    `${baseURL}/movie/${id}/credits?api_key=${API_KEY}`\n  );\n};\n\nexport const getReviews = async id => {\n  return await axios.get(`${baseURL}/movie/${id}/reviews?api_key=${API_KEY}`);\n};\n\n\n\n\n\n\n\n\n\n\n\n\n","// extracted by mini-css-extract-plugin\nexport default {\"actorItem\":\"cast_actorItem__ckSWd\",\"actorList\":\"cast_actorList__fFVeB\",\"actorCharacter\":\"cast_actorCharacter__g4xHi\",\"actorName\":\"cast_actorName__DjUJO\"};","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getCastToId } from 'components/Api/Api';\nimport Loader from 'components/Loader/Loader';\nimport styles from \"./cast.module.css\";\nconst Cast = () => {\n  const [cast, setCast] = useState([]);\n  const [loading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    const getCastMovie = async () => {\n      setIsLoading(true);\n      try {\n        const { data } = await getCastToId(movieId);\n        setCast(data.cast);\n      } catch (error) {\n        setError(error.massage);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    getCastMovie(movieId);\n  }, [movieId]);\n\n\n  return (\n      <ul className={styles.actorList}>\n      {loading && <Loader />} \n      {error && <p>{error.massage}</p>} \n      {cast.length > 0 ? (\n        cast.map(({ id, profile_path, name, character }) => (\n        <li key={id} className={styles.actorItem}>\n        <div>\n            <img\n                src={\n                profile_path === null\n                  ? 'https://klike.net/uploads/posts/2022-09/1662373395_b-1.jpg'\n                  : `https://image.tmdb.org/t/p/w500${profile_path}`\n              }\n                alt={name}\n                width=\"220\"\n                height=\"300\"        \n              />        \n        </div>\n        <p className={styles.actorName}>{name}</p>\n        <p className={styles.actorCharacter}>Character: {character}</p>\n        </li>\n        ))\n      ) : (\n        <p>No cast</p>\n      )}\n    </ul>\n  );\n};\n\nexport default Cast;\n"],"names":["API_KEY","baseURL","getTrendingMovies","axios","params","api_key","responce","data","results","movies","getSearchResults","searchFilms","language","query","page","fetchFilmToId","id","getCastToId","getReviews","useState","cast","setCast","loading","setIsLoading","error","setError","movieId","useParams","useEffect","getCastMovie","massage","className","styles","Loader","length","map","profile_path","name","character","src","alt","width","height"],"sourceRoot":""}